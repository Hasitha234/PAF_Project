{"ast":null,"code":"import axios from \"axios\";\nimport authHeader from \"./auth-header\";\nconst API_URL = \"/api/posts/\";\nclass UploadService {\n  /**\r\n   * Upload images and video with a description\r\n   * @param {string} description - Text description\r\n   * @param {File[]} images - Array of image files (max 3)\r\n   * @param {File} video - Video file (optional)\r\n   * @returns {Promise} - Promise with the response\r\n   */\n  uploadFiles(description, images, video) {\n    const formData = new FormData();\n\n    // Add description\n    formData.append(\"text\", description || \"\");\n\n    // Add images (up to 3)\n    if (images && images.length > 0) {\n      const imagesToUpload = images.slice(0, 3); // Limit to 3 images\n      imagesToUpload.forEach(image => {\n        formData.append(\"images\", image);\n      });\n    }\n\n    // Add video (if any)\n    if (video) {\n      formData.append(\"video\", video);\n    }\n    return axios.post(API_URL, formData, {\n      headers: {\n        ...authHeader(),\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  }\n\n  /**\r\n   * Check if a video is within the duration limit\r\n   * @param {File} videoFile - The video file to check\r\n   * @param {number} maxDurationSeconds - Maximum allowed duration in seconds\r\n   * @returns {Promise<boolean>} - Promise resolving to true if video is within limit\r\n   */\n  checkVideoDuration(videoFile, maxDurationSeconds = 60) {\n    return new Promise((resolve, reject) => {\n      try {\n        const video = document.createElement('video');\n        video.preload = 'metadata';\n        video.onloadedmetadata = function () {\n          window.URL.revokeObjectURL(video.src);\n          resolve(video.duration <= maxDurationSeconds);\n        };\n        video.onerror = function () {\n          window.URL.revokeObjectURL(video.src);\n          reject(new Error(\"Failed to load video metadata\"));\n        };\n        video.src = URL.createObjectURL(videoFile);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\r\n   * Get all uploads by the current user\r\n   * @returns {Promise} - Promise with the response\r\n   */\n  getMyUploads() {\n    return axios.get(API_URL + \"user/me\", {\n      headers: authHeader()\n    });\n  }\n\n  /**\r\n   * Delete a post\r\n   * @param {number} postId - ID of the post to delete\r\n   * @returns {Promise} - Promise with the response\r\n   */\n  deletePost(postId) {\n    return axios.delete(API_URL + postId, {\n      headers: authHeader()\n    });\n  }\n}\nexport default new UploadService();","map":{"version":3,"names":["axios","authHeader","API_URL","UploadService","uploadFiles","description","images","video","formData","FormData","append","length","imagesToUpload","slice","forEach","image","post","headers","checkVideoDuration","videoFile","maxDurationSeconds","Promise","resolve","reject","document","createElement","preload","onloadedmetadata","window","URL","revokeObjectURL","src","duration","onerror","Error","createObjectURL","err","getMyUploads","get","deletePost","postId","delete"],"sources":["C:/Users/kavin/Documents/GitHub/PAF_Project/frontend/src/services/upload.service.js"],"sourcesContent":["import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"/api/posts/\";\r\n\r\nclass UploadService {\r\n  /**\r\n   * Upload images and video with a description\r\n   * @param {string} description - Text description\r\n   * @param {File[]} images - Array of image files (max 3)\r\n   * @param {File} video - Video file (optional)\r\n   * @returns {Promise} - Promise with the response\r\n   */\r\n  uploadFiles(description, images, video) {\r\n    const formData = new FormData();\r\n    \r\n    // Add description\r\n    formData.append(\"text\", description || \"\");\r\n    \r\n    // Add images (up to 3)\r\n    if (images && images.length > 0) {\r\n      const imagesToUpload = images.slice(0, 3); // Limit to 3 images\r\n      imagesToUpload.forEach(image => {\r\n        formData.append(\"images\", image);\r\n      });\r\n    }\r\n    \r\n    // Add video (if any)\r\n    if (video) {\r\n      formData.append(\"video\", video);\r\n    }\r\n    \r\n    return axios.post(API_URL, formData, {\r\n      headers: {\r\n        ...authHeader(),\r\n        \"Content-Type\": \"multipart/form-data\"\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Check if a video is within the duration limit\r\n   * @param {File} videoFile - The video file to check\r\n   * @param {number} maxDurationSeconds - Maximum allowed duration in seconds\r\n   * @returns {Promise<boolean>} - Promise resolving to true if video is within limit\r\n   */\r\n  checkVideoDuration(videoFile, maxDurationSeconds = 60) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const video = document.createElement('video');\r\n        video.preload = 'metadata';\r\n        \r\n        video.onloadedmetadata = function() {\r\n          window.URL.revokeObjectURL(video.src);\r\n          resolve(video.duration <= maxDurationSeconds);\r\n        };\r\n        \r\n        video.onerror = function() {\r\n          window.URL.revokeObjectURL(video.src);\r\n          reject(new Error(\"Failed to load video metadata\"));\r\n        };\r\n        \r\n        video.src = URL.createObjectURL(videoFile);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Get all uploads by the current user\r\n   * @returns {Promise} - Promise with the response\r\n   */\r\n  getMyUploads() {\r\n    return axios.get(API_URL + \"user/me\", { headers: authHeader() });\r\n  }\r\n  \r\n  /**\r\n   * Delete a post\r\n   * @param {number} postId - ID of the post to delete\r\n   * @returns {Promise} - Promise with the response\r\n   */\r\n  deletePost(postId) {\r\n    return axios.delete(API_URL + postId, { headers: authHeader() });\r\n  }\r\n}\r\n\r\nexport default new UploadService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,eAAe;AAEtC,MAAMC,OAAO,GAAG,aAAa;AAE7B,MAAMC,aAAa,CAAC;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,WAAW,EAAEC,MAAM,EAAEC,KAAK,EAAE;IACtC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE/B;IACAD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,WAAW,IAAI,EAAE,CAAC;;IAE1C;IACA,IAAIC,MAAM,IAAIA,MAAM,CAACK,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMC,cAAc,GAAGN,MAAM,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC3CD,cAAc,CAACE,OAAO,CAACC,KAAK,IAAI;QAC9BP,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEK,KAAK,CAAC;MAClC,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIR,KAAK,EAAE;MACTC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;IACjC;IAEA,OAAOP,KAAK,CAACgB,IAAI,CAACd,OAAO,EAAEM,QAAQ,EAAE;MACnCS,OAAO,EAAE;QACP,GAAGhB,UAAU,CAAC,CAAC;QACf,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiB,kBAAkBA,CAACC,SAAS,EAAEC,kBAAkB,GAAG,EAAE,EAAE;IACrD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF,MAAMhB,KAAK,GAAGiB,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;QAC7ClB,KAAK,CAACmB,OAAO,GAAG,UAAU;QAE1BnB,KAAK,CAACoB,gBAAgB,GAAG,YAAW;UAClCC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACvB,KAAK,CAACwB,GAAG,CAAC;UACrCT,OAAO,CAACf,KAAK,CAACyB,QAAQ,IAAIZ,kBAAkB,CAAC;QAC/C,CAAC;QAEDb,KAAK,CAAC0B,OAAO,GAAG,YAAW;UACzBL,MAAM,CAACC,GAAG,CAACC,eAAe,CAACvB,KAAK,CAACwB,GAAG,CAAC;UACrCR,MAAM,CAAC,IAAIW,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACpD,CAAC;QAED3B,KAAK,CAACwB,GAAG,GAAGF,GAAG,CAACM,eAAe,CAAChB,SAAS,CAAC;MAC5C,CAAC,CAAC,OAAOiB,GAAG,EAAE;QACZb,MAAM,CAACa,GAAG,CAAC;MACb;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEC,YAAYA,CAAA,EAAG;IACb,OAAOrC,KAAK,CAACsC,GAAG,CAACpC,OAAO,GAAG,SAAS,EAAE;MAAEe,OAAO,EAAEhB,UAAU,CAAC;IAAE,CAAC,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;EACEsC,UAAUA,CAACC,MAAM,EAAE;IACjB,OAAOxC,KAAK,CAACyC,MAAM,CAACvC,OAAO,GAAGsC,MAAM,EAAE;MAAEvB,OAAO,EAAEhB,UAAU,CAAC;IAAE,CAAC,CAAC;EAClE;AACF;AAEA,eAAe,IAAIE,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}